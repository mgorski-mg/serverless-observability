Transform: AWS::Serverless-2016-10-31

Resources:
  AddItemLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ServerlessObservability::ServerlessObservability.Functions.AddItemLambda::InvokeAsync
      Role: !GetAtt AddItemLambdaRole.Arn
      Environment:
        Variables:
          BucketName: !Ref StackBucket
          QueueUrl: !Ref ItemsQueue
          QueueV2Url: !Ref ItemsQueueV2

  NotifyLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ServerlessObservability::ServerlessObservability.Functions.NotifyLambda::InvokeAsync
      Role: !GetAtt NotifyLambdaRole.Arn
      Environment:
        Variables:
          ExternalApiUrl: http://worldclockapi.com

  UpdateItemLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ServerlessObservability::ServerlessObservability.Functions.UpdateItemLambda::InvokeAsync
      Role: !GetAtt UpdateItemLambdaRole.Arn
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt ItemsQueue.Arn
      Environment:
        Variables:
          NotifyLambdaName: !Ref NotifyLambda
          BucketName: !Ref StackBucket

  UpdateItemLambdaV2:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ServerlessObservability::ServerlessObservability.Functions.UpdateItemLambdaV2::InvokeAsync
      Role: !GetAtt UpdateItemLambdaRoleV2.Arn
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt ItemsQueueV2.Arn
      Environment:
        Variables:
          NotifyLambdaName: !Ref NotifyLambda
          BucketName: !Ref StackBucket

  AddItemLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: allowToUseSqs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource:
                  - !GetAtt ItemsQueue.Arn
                  - !GetAtt ItemsQueueV2.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com

  NotifyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com

  UpdateItemLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: allowToUseSqs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt ItemsQueue.Arn
        - PolicyName: allowToCallLambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt NotifyLambda.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com

  UpdateItemLambdaRoleV2:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: allowToUseSqs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt ItemsQueueV2.Arn
        - PolicyName: allowToCallLambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt NotifyLambda.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com

  GetObjectsFromStackBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-get-objects-from-stack-bucket-policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:ListBucket
            Resource: !GetAtt StackBucket.Arn
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub ${StackBucket.Arn}/*
      Roles:
        - Ref: UpdateItemLambdaRole
        - Ref: UpdateItemLambdaRoleV2

  PutObjectsToStackBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-put-objects-to-stack-bucket-policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:ListBucket
            Resource: !GetAtt StackBucket.Arn
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Sub ${StackBucket.Arn}/*
      Roles:
        - Ref: AddItemLambdaRole
        - Ref: UpdateItemLambdaRole
        - Ref: UpdateItemLambdaRoleV2

  StackBucket:
    Type: AWS::S3::Bucket

  ItemsQueue:
    Type: AWS::SQS::Queue

  ItemsQueueV2:
    Type: AWS::SQS::Queue

Globals:
  Function:
    Runtime: dotnet6
    MemorySize: 1536
    Timeout: 30
    Tracing: Active
    Architectures:
      - arm64